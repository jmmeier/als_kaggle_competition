training_features = read.csv("training_features.csv")
View(training_features)
leaderboard_features = read.csv("leaderboard_features.csv")
training_features = read.csv("training_features.csv")
training_target = read.csv("training_target.csv")
validation_features = read.csv("validation_features.csv")
validation_target = read.csv("validation_target.csv")
leaderboard_features = read.csv("leaderboard_features.csv")
training_features = read.csv("training_features.csv")
training_target = read.csv("training_target.csv")
validation_features = read.csv("validation_features.csv")
validation_target = read.csv("validation_target.csv")
leaderboard_features = read.csv("leaderboard_features.csv")
training_features = read.csv("training_features.csv")
training_target = read.csv("training_target.csv")
validation_features = read.csv("validation_features.csv")
validation_target = read.csv("validation_target.csv")
leaderboard_features = read.csv("leaderboard_features.csv")
covariance = cov(training_features)
correlation = cor(training_features)
covariance = cov(training_features)
View(correlation)
for(i in names(training_features)) {
print(i)
}
```{r}
for(i in names(training_features)) {
correlation = cor(training_target, training_features$i)
}
for(i in names(training_features)) {
i = as.name(i)
correlation = cor(training_target, training_features$i)
}
```{r}
for(i in names(training_features)) {
i = as.name(i)
correlation = cor(training_target, training_features$i)
summary(correlation)
}
for(i in names(training_features)) {
i = as.name(i)
correlation = cor(training_target, training_features$i)
summary(correlation)
}
for(i in names(training_features)) {
i = as.name(i)
correlation = cor(training_target, training_features$i)
print(correlation)
}
```{r}
for(i in names(training_features)) {
correlation = cor(training_target, training_features[i])
summary(correlation)
}
for(i in names(training_features)) {
correlation = cor(training_target, training_features[i])
summary(correlation)
}
print(i)
for(i in names(training_features)) {
print(i)
}
View(training_target)
for(i in names(training_features)) {
test = lm(training_target$ALSFRS_slope ~ mean.slope.respirator_r, training_features)
print(i)
}
for(i in names(training_features)) {
test = lm(training_target$ALSFRS_slope ~ mean.slope.respiratory_r, training_features)
print(i)
}
for(i in names(training_features)) {
test = lm(training_target$ALSFRS_slope ~ i, training_features)
print(i)
}
for(i in names(training_features)) {
i = as.name(i)
test = lm(training_target$ALSFRS_slope ~ i, training_features)
print(i)
}
for(i in names(training_features)) {
data = training_features[[i]]
test = lm(training_target$ALSFRS_slope ~ data)
print(i)
}
for(i in names(training_features)) {
data = training_features[[i]]
test = lm(training_target$ALSFRS_slope ~ data)
summary(test)
}
for(i in names(training_features)) {
data = training_features[[i]]
test = lm(training_target$ALSFRS_slope ~ data)
summary(test)
}
library(kernlab)
library(kernlab)
linear_model = lm(training_target$ALSFRS_slope ~ training_features$onset_delta + training_features$diag_delta)
print(summary(linear_model))
linear_model = lm(training_target$ALSFRS_slope ~ training_features$onset_delta + training_features$onset_site.Limb)
print(summary(linear_model))
linear_model = lm(training_target$ALSFRS_slope ~ training_features$onset_delta + training_features$onset_site.Limb + training_features$onset_site.Bulbar)
print(summary(linear_model))
linear_model = lm(training_target$ALSFRS_slope ~ training_features$onset_delta + training_features$onset_site.Limb + training_features$if_use_riluzole.Yes)
print(summary(linear_model))
prediction = predict(linear_model, validation_features)
print(prediction)
print(validation_target)
validation_features_altered = validation_features[, c(onset_delta, onset_site.Limb, if_use_riluzole.Yes)]
validation_features_altered = c(validation_features$onset_delta, validation_features$onset_site.Limb, validation_features$if_use_riluzole.Yes)]
validation_features_altered = c(validation_features$onset_delta, validation_features$onset_site.Limb, validation_features$if_use_riluzole.Yes)
prediction = predict(linear_model, validation_features_altered)
linear_model = lm(training_target$ALSFRS_slope ~ training_features$onset_delta + training_features$onset_site.Limb + training_features$if_use_riluzole.Yes)
test_subset = subset(validation_features, select = c(onset_delta, onset_site.Limb, if_use_riluzole.Yes))
prediction = predict(linear_model, validation_features)
mse_test = (prediction, validation_target$ALSFRS_slope)
mse_test = mse(prediction, validation_target$ALSFRS_slope)
library(hydroGOF)
print(prediction)
print(summary(prediction))
X = rnorm(100)
e = rnorm(100)
B_0 = 1
B_1 = 2
B_2 = 3
B_3 = 4
Y = B_0 + B_1*X + B_2 * (X^2) + B_3 * (X^3)
library(leaps)
data = data.frame(X = X, Y = Y)
install.packages("leaps")
package.install("glmnet")
install.package("glmnet")
install.packages("glmnet")
